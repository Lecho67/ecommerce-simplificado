version: '3.8'

services:
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword # ¡CAMBIA ESTO EN PRODUCCIÓN!
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    build: ./backend
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             gunicorn ecommerce_backend.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./backend:/app/backend # Monta el código fuente para desarrollo
    ports:
      - "8000:8000"
    environment:
      DJANGO_ALLOWED_HOSTS: "*"
      DJANGO_SECRET_KEY: "your_django_secret_key" # ¡CAMBIA ESTO EN PROD POR UNA CLAVE SEGURA!
      POSTGRES_NAME: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    depends_on:
      db:
        condition: service_healthy

  frontend: 
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    volumes:
      - ./frontend:/app/frontend # Monta el código fuente para desarrollo
      - /app/frontend/node_modules # Evita que node_modules del host sobreescriba el del contenedor
    ports:
      - "3000:80"
    environment:
      REACT_APP_API_URL: /api/
    depends_on:
      backend:
        condition: service_started

volumes:
  postgres_data: